---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  labels:
{{ include "notes.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.app.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.app.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.app.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.app.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      # Create a volume with the application secrets
      volumes:
        - name: {{ include "notes.secretName" . }}
          secret:
            secretName: {{ include "notes.secretName" . }}
      containers:
        - name: {{ .Values.app.name }}
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8120
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /heartbeat
              port: http
          
          # Expose application secret contents as a volume in /edx/etc
          volumeMounts:
            - mountPath: "/edx/etc"
              name: {{ include "notes.secretName" . }}
              readOnly: true
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
      initContainers:
        # Busybox is an extremely small utility image with a complete shell environment, read more about it here:
        # https://busybox.net/about.html
      - name: init-elasticsearch
        image: busybox:1.31.0
        command: ['sh', '-c', 'until nslookup notes-elasticsearch-master; do echo waiting for notes-elasticsearch-master; sleep 2; done;']
      - name: init-mysql
        image: busybox:1.31.0
        command: ['sh', '-c', 'until nslookup notes-mysql; do echo waiting for notes-mysql; sleep 2; done;']
        {{ if .Values.migrations.enabled }}
      - name: {{ .Values.migrations.migrationContainerName }}
        image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
        imagePullPolicy: {{ .Values.app.image.pullPolicy }}
        command: ["python", "manage.py", "migrate"]
        volumeMounts:
          - mountPath: "/edx/etc"
            name: {{ include "notes.secretName" . }}
            readOnly: true
        resources:
          {{- toYaml .Values.app.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.extraInitContainers }}
        {{ tpl .Values.extraInitContainers . | indent 6 }}
        {{- end }}
      {{- with .Values.app.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.app.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.app.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
